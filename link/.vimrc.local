" .gvimrc
" See: http://vimdoc.sourceforge.net/htmldoc/options.html for details

" Use .vimrc.custom if available {
    if filereadable(expand("~/.vimrc.custom"))
        source ~/.vimrc.custom
    endif
" }
"
" For multi-byte character support (CJK support, for example):
"set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,gb18030,latin1
"
" For UTF-8 support
if has("multi_byte")
    if &termencoding == ""
        let &termencoding = &encoding
    endif
    set encoding=utf-8
    setglobal fileencoding=utf-8
    "setglobal bomb
    set fileencodings=ucs-bom,utf-8,latin1
endif

set t_kb= t_kD=[3~  " Meant to deal with errors related to Xterm's
                        " key configuration

set nocompatible    " Meant to deal with errors related to strong Vi
                    " compatibility

set shiftwidth=4    " Number of spaces to use for each step of (auto)indent.

set tabstop=4       " Number of spaces that a <Tab> in the file counts for.

set expandtab       " Use the appropriate number of spaces to insert a <Tab>.
                    " Spaces are used in indents with the '>' and '<' commands
                    " and when 'autoindent' is on. To insert a real tab when
                    " 'expandtab' is on, use CTRL-V <Tab>.

set smarttab        " When on, a <Tab> in front of a line inserts blanks
                    " according to 'shiftwidth'. 'tabstop' is used in other
                    " places. A <BS> will delete a 'shiftwidth' worth of space
                    " at the start of the line.

set showcmd         " Show (partial) command in status line.

set number          " Show line numbers.

set nuw=4           " Set the number of characters the line numbers column displays

set showmatch       " When a bracket is inserted, briefly jump to the matching
                    " one. The jump is only done if the match can be seen on the
                    " screen. The time to show the match can be set with
                    " 'matchtime'.

set incsearch       " While typing a search command, show immediately where the
                    " so far typed pattern matches.

set ignorecase      " Ignore case in search patterns.

set smartcase       " Override the 'ignorecase' option if the search pattern
                    " contains upper case characters.

set autoindent      " Copy indent from current line when starting a new line
                    " (typing <CR> in Insert mode or when using the "o" or "O"
                    " command).

set textwidth=100   " Maximum width of text that is being inserted. A longer
                    " line will be broken after white space to get this width.

set formatoptions=c,q,r,t   " This is a sequence of letters which describes how
                            " automatic formatting is to be done.
                            "
                            " letter    meaning when present in 'formatoptions'
                            " ------    ---------------------------------------
                            " c         Auto-wrap comments using textwidth, inserting
                            "           the current comment leader automatically.
                            " q         Allow formatting of comments with "gq".
                            " r         Automatically insert the current comment leader
                            "           after hitting <Enter> in Insert mode.
                            " t         Auto-wrap text using textwidth (does not apply
                            "           to comments)

set ruler           " Show the line and column number of the cursor position,
                    " separated by a comma.

set background=dark " When set to "dark", Vim will try to use colors that look
                    " good on a dark background. When set to "light", Vim will
                    " try to use colors that look good on a light background.
                    " Any other value is illegal.

set mouse=a         " Enable the use of the mouse.

filetype plugin on  "Attempt to determine the type of file based on its
                    " name and possibly its contents.  Use this to allow
                    " intelligent auto-indenting for each filetype, and for
                    " plugins that are filetype-specific.

syntax on           " Enable syntax highlighting

set grepprg=grep\ -nH\ $*

set hidden          " Allows using the same window for multiple files, and switching
                    " from and unsaved buffer without having to save it first.
                    " Also allows keeping an 'undo' history for multiple files
                    " when reusing the same window in this way.

set wildmenu        " Better command-line completion
set wildmode=list:longest,full

set showcmd         " Show partial commands in the last line of the screen.

set nostartofline   " Stop certain movements from always going to the start
                    " of the line.

set laststatus=2    " Always show status line, even if there's only one window

set confirm         " Instead of failing a command because of unsaved changes,
                    " instead raise a dialogue asking if you wish to save

set visualbell      " Use visual bell instead of beeping when error occurs

set cmdheight=2     " Set the command height window to 2 lines

set notimeout ttimeout ttimeoutlen=200  " Quickly time out on keycodes; never
                    " time out on mappings.

set pastetoggle=<F11>   " Use F11 to toggle between 'paste' and 'nopaste'

set tw=79           " Limit all lines to 79 characters

set formatoptions+=t    " Wraps text as close as possible to 79 characters
                        " without splitting words

map Y y$
                    " Map Y to work like D and C, i.e. to yank until EOL,
                    " rather than to act as yy, which is the default.

nnoremap <C-L> :nohl<CR><C-L>
                    " Map <C-L> (redraw screen) to also turn off
                    " search highlighting until the next search.

" Remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" Automatically detect filetype upon :w
autocmd BufRead,BufWrite,BufWritePost * :filetype detect

" Don't automatically fold
set foldmethod=manual

let g:autoclose_vim_commentmode = 1     " try to stop autoclose from closing  comment characters in Vim files

let g:C_SourceCodeExtensions = 'c cc cp cxx cpp CPP c++ C i ii hxx h'

let g:Perl_MapLeader = ';'

" Deals with temporary hang when saving python files
let g:pymode_rope_lookup_project = 0

" Maybe fixes BundleSearch errors?
set shell=/bin/bash

" Stop it with the stupid automatic folding
set foldlevelstart=20

" No longer using Haskellmode
" Haskellmode settings
"au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
"au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>
"au BufEnter *.hs compiler ghc
"let g:haddock_browser="/usr/bin/dwb"



""""""""""""""""""""""
""" Key remappings """
""""""""""""""""""""""

" Tab handling mappings
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tt :tabedit<Space>
nnoremap tn :tabnext<Space>
nnoremap tm :tabm<Space>
nnoremap td :tabclose<CR>

" Enter normal mode
inoremap jjj <Esc>
nnoremap JJJJ <Nop>

" Enter and exit 'hex mode' (streaming buffer through xxd)
noremap <F7> :%!xxd <CR>
noremap <F8> :%!xxd -r <CR>

" Map Y to work like D and C, i.e. to yank until EOL,
" rather than to act as yy, which is the default.
map Y y$

" Map <C-L> (redraw screen) to also turn off
" search highlighting until the next search.
nnoremap <C-L> :nohl<CR><C-L>


""""""""""""""""""""""""""
""" Functions/Commands """
""""""""""""""""""""""""""

" Syntax: [:Etabs | :Ewindows | :Evwindows] file1 [, file2, ... , fileN]
" Opens a list of files in different tabs/windows/vertical windows
command! -complete=file -nargs=+ Etabs call s:ETW('tabnew', <f-args>)
command! -complete=file -nargs=+ Ewindows call s:ETW('new', <f-args>)
command! -complete=file -nargs=+ Evwindows call s:ETW('vnew', <f-args>)

function! s:ETW(what, ...)
  for f1 in a:000
    let files = glob(fnamemodify(f1, ":p"))
    if files == ''
      execute a:what . ' ' . fnameescape(f1)
    else
      for f2 in split(files, "\n")
        execute a:what . ' ' . fnameescape(f2)
      endfor
    endif
  endfor
endfunction

command! -nargs=+ Tabposition call s:Tabposition(<f-args>)
command! -nargs=? Tabfirst call s:Tabposition(0, <f-args>)

function! s:Tabposition(posi, ...)
    let file = fnameescape(a:1)
    if file == '0'
        execute "tabnew"
    else
        execute "tabnew " . file
    endif
    execute a:posi . "tabmove"
endfunction

" Return indent (all whitespace at start of a line), converted from
" tabs to spaces if what = 1, or from spaces to tabs otherwise.
" When converting to tabs, result has no redundant spaces.
function! Indenting(indent, what, cols)
  let spccol = repeat(' ', a:cols)
  let result = substitute(a:indent, spccol, '\t', 'g')
  let result = substitute(result, ' \+\ze\t', '', 'g')
  if a:what == 1
    let result = substitute(result, '\t', spccol, 'g')
  endif
  return result
endfunction

" Convert whitespace used for indenting (before first non-whitespace).
" what = 0 (convert spaces to tabs), or 1 (convert tabs to spaces).
" cols = string with number of columns per tab, or empty to use 'tabstop'.
" The cursor position is restored, but the cursor will be in a different
" column when the number of characters in the indent of the line is changed.
function! IndentConvert(line1, line2, what, cols)
  let savepos = getpos('.')
  let cols = empty(a:cols) ? &tabstop : a:cols
  execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
  call histdel('search', -1)
  call setpos('.', savepos)
endfunction
command! -nargs=? -range=% Space2Tab call IndentConvert(<line1>,<line2>,0,<q-args>)
command! -nargs=? -range=% Tab2Space call IndentConvert(<line1>,<line2>,1,<q-args>)
command! -nargs=? -range=% RetabIndent call IndentConvert(<line1>,<line2>,&et,<q-args>)

function! CommandCabbrev(abbreviation, expansion)
  execute 'cabbr ' . a:abbreviation . ' <c-r>=getcmdpos() == 1 && getcmdtype() == ":" ? "' . a:expansion . '" : "' . a:abbreviation . '"<CR>'
endfunction
command! -nargs=+ CommandCabbrev call CommandCabbrev(<f-args>)

"""""""""""""""""""""
""" Abbreviations """
"""""""""""""""""""""
" Abbreviate CommandCabbrev to a lowercase abbreviation
CommandCabbrev ccab CommandCabbrev

"""""""""""""""""""""
""" Miscellaneous """
"""""""""""""""""""""

" Use per-host local vimrc if available {
    if filereadable(expand("~/.vimrc.local.custom"))
        source ~/.vimrc.local.custom
    endif
" }

command! SourceAll if filereadable($MYVIMRC) | source $MYVIMRC | endif | if has('gui_running') && filereadable($MYGVIMRC) |  source $MYGVIMRC | endif

augroup myvimrc
    au!
    au BufWritePost .vimrc*,_vimrc*,vimrc*,vimrc*,.gvimrc*,_gvimrc*,gvimrc* SourceAll
augroup END
